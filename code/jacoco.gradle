/**
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
 apply plugin: 'jacoco'

task unitTestsCoverageReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/phoneDebug", excludes: excludeRegex)
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))

    def mainSrc = "${project.projectDir}/src/main/java"
    def phoneSrc = "${project.projectDir}/src/phone/java"
    sourceDirectories.setFrom files([mainSrc, phoneSrc])

    executionData.setFrom fileTree(dir: "$buildDir", includes: [            
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/testPhoneDebugUnitTest.exec",
    ])

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task functionalTestsCoverageReport(type: JacocoReport, dependsOn: "createPhoneDebugCoverageReport") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/phoneDebug", excludes: excludeRegex)
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))

    def mainSrc = "${project.projectDir}/src/main/java"
    def phoneSrc = "${project.projectDir}/src/phone/java"
    sourceDirectories.setFrom files([mainSrc, phoneSrc])

    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

